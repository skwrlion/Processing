/***************

  Matrix Translations
  Tumblr https://zoombeani.tumblr.com/post/167154060995
  Instagram https://www.instagram.com/p/BbE4egqj9zB
  Zoombeani
  Rev 04-Nov-2017
  Org 03-Nov-2017

***************/

int[][] result;
float t;

int samplesPerFrame = 16;     //for mode 2,3
float shutterAngle = .7;      //for mode 2,3
int numFrames = 360;           //for mode 2,3,4
boolean gif=false;             //True: gifs are rendered at ~33 fps,
                              //  eg gifLength * 33 = numFrames
                              //False: mp4/ pngs are rendered at 33 fps,
                              //  eg mp4Length * 33 = numFrames

int mode = 1; //Mouse press for fine tune with mouseX
              //1  for preview animation
              //2  for preview animation with Bees and Bombs renderer
              //3  for render to image with Bees and Bombs renderer

float test,w, h,sc;
PShape zLogo;
int nPh=7;
float[] ph=new float[nPh+1];

float back=20,
     front=340;

void settings() {
  if(gif) size(540,540,P3D);
  else size(750,750,P3D);
  smooth(8);
}

void setup() {  
  w=width/2.;
  h=height/2.;

  colorMode(HSB,360,100,100,100);
  noStroke();
  stroke(front);
  strokeWeight(8);
  noFill();
  ortho();
  
  if(mode==2 || mode==3) result = new int[width*height][3];
}

void draw() {
  getRenderer();
}

void draw_(){
  //test=map(mouseY,0,height,0.1,4);
  //println(test);
  
  pushMatrix();
  background(back);

  translate(w,h);
  float sc=width/540.;
  //scale(sc);
  
  int ni=5,nj=ni,a=3; //Tumblr a=3, Instagram a=0
  
  ph[0]=0;
  for(int i=1;i<=nPh;i++){
    ph[i]=float(i)/float(nPh);
  }
 
  if(t<ph[1]){
    float tt=norm(t,ph[0],ph[1]);
    float tte=ease(tt,3);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4*tte;
      for(int j=0;j<nj;j++){
        float y=map(j,0,nj-1,-1,1)*h*.4*tte;
        point(x,y);
      }
    }
  }else if(t<ph[2]){
    float tt=norm(t,ph[1],ph[2]);
    float tte=ease(tt,3);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4;
      for(int j=0;j<nj;j++){
        float y=map(j,0,nj-1,-1,1)*h*.4;
        pushMatrix();
        rotateZ(PI*tte);
        rotateX(HALF_PI*tte);
        point(x,y);
        popMatrix();
      }
    }
  }else if(t<ph[3]){
    float tt=norm(t,ph[2],ph[3]);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4;
      float tMod=map(i,0,ni-1,0,.5);
      float ttt=0;
      if(tMod>tt) ttt=0;
      else ttt=norm(tt,tMod,1);
      float tte=ease(ttt,3);
      
      for(int j=0;j<nj;j++){
        float z=map(j,0,nj-1,-1,1)*h*.4;
        
        pushMatrix();
        rotateX(HALF_PI*tte);
        point(x,0,z);
        popMatrix();
      }
    }
  }else if(t<ph[4]){
    float tt=norm(t,ph[3],ph[4]);
    float tte=ease(tt,3);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4;
      
      for(int j=0;j<nj;j++){
        float y=map(j,0,nj-1,-1,1)*h*.4;
        float z=map(j,0,nj-1,-1,1)*h*.4;
        
        pushMatrix();
        rotateY((PI+HALF_PI)*tte);
        point(x,y,z);
        popMatrix();
      }
    }
  }else if(t<ph[5]){
    float tt=norm(t,ph[4],ph[5]);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4;
      float y=-map(i,0,ni-1,-1,1)*w*.4;
      float tMod=map(i,ni-1,0,0,.5);
      float ttt=0;
      if(tMod>tt) ttt=0;
      else ttt=norm(tt,tMod,1);
      float tte=ease(ttt,3);
      
      for(int j=0;j<nj;j++){
        float z=map(j,0,nj-1,-1,1)*h*.4;
        
        pushMatrix();
        rotateX(HALF_PI*tte);
        point(x,y,z);
        popMatrix();
      }
    }
  }else if(t<ph[6]){
    float tt=norm(t,ph[5],ph[6]);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*.4;
      
      for(int j=0;j<nj;j++){
        float y=map(j,0,nj-1,-1,1)*h*.4;
        float z=map((i+j+a)%nj,0,nj-1,-1,1)*h*.4;
        
        pushMatrix();
        if(tt<.5){
          float ttt=norm(tt,0,.5);
          float tte=ease(ttt,3);
          rotateY((PI+HALF_PI)*tte);
        }else{
          float ttt=norm(tt,.5,1);
          float tte=ease(ttt,3);
          rotateY(PI+HALF_PI);
          rotateZ((PI+HALF_PI)*tte);
        }
        point(x,y,z);
        popMatrix();
      }
    }
  }else{// if(t<=ph[7]){
    float tt=norm(t,ph[6],ph[7]);
    float tte=ease(tt,5);
    float scc=map(tte,0,1,.4,40);
    
    for(int i=0;i<ni;i++){
      float x=map(i,0,ni-1,-1,1)*w*scc;
      
      for(int j=0;j<nj;j++){
        float y=map(j,0,nj-1,-1,1)*h*scc;
        
        pushMatrix();
        point(x,y,0);
        popMatrix();
      }
    }
  }
  
  popMatrix();
}

//### Easing formulas
float ease(float p) {                          //courtesy of patakk> Bees & Bombs
  return 3*pow(p,2) - 2*pow(p,3); 
} float ease(float p, float g) {               //courtesy of patakk> Bees & Bombs
  if (p < 0.5) return 0.5 * pow(2*p, g); 
  else return 1 - 0.5 * pow(2*(1 - p), g); 
} float ease(float p, float g, float h) {      //courtesy of metaglitch, g is ease at beginning of motion,
    return (1-p)*ease(p, g) + p*ease(p, h);    //h is ease at completion of motion
}//###

// Efficiently randomize an array
// Var type of shuffleArray, array and temporaryValue
// must be the same and can be any var
String[] shuffleArray(String[] array) {
  int currentIndex = array.length, randomIndex;
  String temporaryValue;

  // While there remain elements to shuffle...
  while (0 != currentIndex) {

    // Pick a remaining element...
    randomIndex = int(random(1) * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

//%%% Get time from 0 to 1 for looping animations using a choice of renderers
void getRenderer(){
  if (mousePressed && (mode==1 || mode==2)) {     //Fine tune with mouse
    t = mouseX*1.0/width; //Thank you metaglitch
    t=constrain(t,0,1);
    t=t%1;
    draw_();
  } else if(mode==1) {    //Preview animation loop
    draw_();              //(Implemented by Zoombeani,
    t+=0.00125;            //idea courtesy of metaglitch)
    if(t>=1.) t=0;        //Larger step = faster animation
  } else if(mode==2) {    //Get time for preview of Bees and Bombs render
    renderbb();
    if(t>=1.) frameCount=0;
  } else if(mode==3){     //Get time and render with Bees and Bombs renderer
    renderbb();    
    if(gif) saveFrame("gif/f###.gif");
    else{
      saveFrame("png/f###.png");
      /*if(frameCount<5){
        frameCount=frameCount+numFrames;
        saveFrame("png/f###.png");
        frameCount=frameCount-numFrames;
      }*/
    }
    if (frameCount==numFrames) exit();
  }
}//%%%

//~~~ Bees and Bombs Renderer
void renderbb(){
  for (int i=0; i<width*height; i++) for (int a=0; a<3; a++) result[i][a] = 0;
  for (int sa=0; sa<samplesPerFrame; sa++) {
    t = map(frameCount-1 + sa*shutterAngle/samplesPerFrame, 0, numFrames, 0, 1.);
    draw_();
    loadPixels();
    for (int i=0; i<pixels.length; i++) {
      result[i][0] += pixels[i] >> 16 & 0xff;
      result[i][1] += pixels[i] >> 8 & 0xff;
      result[i][2] += pixels[i] & 0xff;
    }
  }
  loadPixels();
  for (int i=0; i<pixels.length; i++)
    pixels[i] = 0xff << 24 |
      int(result[i][0]*1.0/samplesPerFrame) << 16 | 
      int(result[i][1]*1.0/samplesPerFrame) << 8 | 
      int(result[i][2]*1.0/samplesPerFrame);
  updatePixels(); 
}//~~~

void keyPressed(){
  if(key=='R' || key=='r') saveFrame("f#####.png");
  if(key=='X' || key=='x') setup();
}

void onBackPressed(){
  setup();
}
